//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Центр_занятости
{
    using System;
    using System.Collections.Generic;
    
    public partial class Applicants
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Applicants()
        {
            this.ApplicationOfUnemployed = new HashSet<ApplicationOfUnemployed>();
            this.ExpWorkUnemployed = new HashSet<ExpWorkUnemployed>();
            this.ReferralToWork = new HashSet<ReferralToWork>();
            this.Stipend = new HashSet<Stipend>();
        }
    
        public int ID { get; set; }
        public int ID_User { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string Patronymic { get; set; }
        public System.DateTime Birthday { get; set; }
        public int Сitizenship { get; set; }
        public int Gender { get; set; }
        public Nullable<int> Passport { get; set; }
        public string INN { get; set; }
        public string SNILS { get; set; }
        public Nullable<int> Address { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public Nullable<int> WorkExp { get; set; }
        public Nullable<int> PaymentAcc { get; set; }
        public int Education { get; set; }
        public bool Registered { get; set; }
        public Nullable<int> Profession { get; set; }

        public string Opyt
        {
            get
            {
                int sumG = 0;
                int sumM = 0;
                int sum = 0;
                foreach (var x in ExpWorkUnemployed)
                {
                    if (x.DateOfDismissal == null)
                    {
                        x.DateOfDismissal = DateTime.Now;
                    }
                    TimeSpan? ts = x.DateOfDismissal - x.DateStart;
                    sum += ts.Value.Days;
                }
                sumM = sum / 28;
                sumG = sum / 30 / 12;
                if (sumG == 0 && sumM == 0)
                {
                    return "нет";
                }
                else if (sumG == 0 && sumM > 0)
                {
                    if (sumM == 1)
                    {
                        return $"{sumM} месяц";
                    }
                    else if (sumM >= 2 && sumM <= 4)
                    {
                        return $"{sumM} месяца";
                    }
                    else
                    {
                        return $"{sumM} месяцев";
                    }
                }
                else if (sumG > 0)
                {
                    if (sumG == 1)
                    {
                        return $"{sumG} год";
                    }
                    else if (sumG >= 2 && sumG <= 4)
                    {
                        return $"{sumG} года";
                    }
                    else if (sumG >= 5 && sumG <= 20)
                    {
                        return $"{sumG} лет";
                    }
                    else
                    {
                        if (sumG % 10 == 1)
                        {
                            return $"{sumG} год";
                        }
                        else if (sumG % 10 >= 2 && sumG % 10 <= 4)
                        {
                            return $"{sumG} года";
                        }
                        else
                        {
                            return $"{sumG} лет";
                        }
                    }
                }
                else return "нет";
            }

            set
            {

            }
        }

        public string Adres
        {
            get
            {
                if (RegistrationAddress == null || Address == null || Address == 0)
                {
                    return "";
                }
                else return $"{RegistrationAddress.Localities.Name}, " +
                    $"{RegistrationAddress.Street}, " +
                    $"{RegistrationAddress.Flat}";
            }
            set
            {

            }
        }

        public string Pasp
        {
            get
            {
                if (Passport == null || Passport == 0 || Passport1 == null)
                {
                    return "";
                }
                else return $"{Passport1.Series} {Passport1.Number}";
            }
            set
            {

            }
        }

        public string Acc
        {
            get
            {
                if (PaymentAcc == null || PaymentAcc == 0
                    || PaymentAccount == null) return "";
                else return $"{PaymentAccount.AccountCitizen}";
            }
            set
            {

            }
        }

        public string FIO
        {
            get
            {
                if (LastName == null || FirstName == null ||
                    Patronymic == null)
                {
                    return "";
                }
                else return $"{LastName} {FirstName} {Patronymic}";
            }
        }

        public string Gen
        {
            get
            {
                if (Genders.Name == "Мужской") return "Гражданин";
                else if (Genders.Name == "Женский") return "Гражданка";
                else return "";
            }
        }

        public string Ge
        {
            get
            {
                if (Gen == "Гражданин") return "отказался";
                else if (Gen == "Гражданка") return "отказалась";
                else return "";
            }
        }

        public string AbbFIO
        {
            get
            {
                char I = FirstName[0];
                char O = Patronymic[0];
                return $"{LastName} {I}.{O}.";
            }
        }

        public virtual Countries Countries { get; set; }
        public virtual Educations Educations { get; set; }
        public virtual Genders Genders { get; set; }
        public virtual Passport Passport1 { get; set; }
        public virtual PaymentAccount PaymentAccount { get; set; }
        public virtual Professions Professions { get; set; }
        public virtual RegistrationAddress RegistrationAddress { get; set; }
        public virtual Users Users { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ApplicationOfUnemployed> ApplicationOfUnemployed { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ExpWorkUnemployed> ExpWorkUnemployed { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ReferralToWork> ReferralToWork { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Stipend> Stipend { get; set; }
    }
}
